%piv3

clear all;
clc;
close all;

% Read single image pair
imgname = "B00005.tif";
im = imread(imgname);
imagea = im(1:1236,1:1624);
imageb = im(1237:2472,1:1624);

% % Read 2 distinct images
% imagea = imread('Image_0001_a.tif');
% imageb = imread('Image_0001_b.tif');

% Variables
pp = 4.4e-6;
M = 0.04775;
fstop = 5.6;
ts = 73.72e-6;
ws = 32;
overlap = 8;

% Get the size of the images
[rows, cols] = size(imagea);
step = ws - overlap;
num_x = floor((cols - overlap) / step);
num_y = floor((rows - overlap) / step);

% Initialize the displacement fields
u = zeros(num_y, num_x);
v = zeros(num_y, num_x);
 
% Initialize the grid for velocity vectors
x = zeros(num_y, num_x);
y = zeros(num_y, num_x);

% Loop over each interrogation window
for i = 1:num_y
    text = sprintf('Running: Step %0.1f/%d',i,num_y);
    disp(text)
    for j = 1:num_x
        % Define the window region
        x_start = (j-1) * step + 1;
        y_start = (i-1) * step + 1;
        x_end = x_start + ws - 1;
        y_end = y_start + ws - 1;
           
        % Extract the interrogation windows
        win1 = imagea(y_start:y_end, x_start:x_end);
        win2 = imageb(y_start:y_end, x_start:x_end);
         
        % Compute the cross-correlation
        C = normxcorr2(win1, win2);
         
        % Find the peak in the cross-correlation matrix
        [max_y, max_x] = find(C == max(C(:)), 1);
         
        % Calculate the displacement
        dx = max_x - ws;
        dy = max_y - ws;
            
        % Store the displacement
        u(i, j) = dx;
        v(i, j) = dy;
            
        % Store the center position of the interrogation window
        x(i, j) = x_start + ws / 2;
        y(i, j) = y_start + ws / 2;
    end
end

figure
quiver(x, y, u, v, 'k')
title('PIV Velocity Field')
xlabel('X')
ylabel('Y')
axis equal

% Calculate the velocity magnitude
velocity_magnitude = sqrt(u.^2 + v.^2);
 
% Create the contour plot
figure;
contourf(x, y, velocity_magnitude, 20); % 20 levels of contours
colorbar;
title('Velocity Magnitude Contourf Map');
xlabel('X');
ylabel('Y');
axis equal;

% Optionally, overlay velocity vectors
% hold on;
% quiver(x, y, u, v, 'k');
% hold off;

figure;
contour(x, y, velocity_magnitude, 20); % 20 levels of contours
colorbar;
title('Velocity Magnitude Contour Map');
xlabel('X');
ylabel('Y');
axis equal;

